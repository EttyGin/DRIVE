#!/usr/bin/env bash
set -euo pipefail

# === Debug option ===
if [ "${DEBUG:-0}" = "1" ]; then
  set -x
fi

# === ◊ß◊ú◊ê◊°◊ò◊®◊ô◊ù ◊ñ◊û◊ô◊†◊ô◊ù ===
CLUSTERS=("bm" "rawdemo")

# === ◊ò◊ô◊§◊ï◊ú ◊ë◊§◊®◊û◊ò◊®◊ô◊ù ===
if [ $# -eq 0 ]; then
  # ◊ê◊ô◊ü ◊§◊®◊û◊ò◊®◊ô◊ù ‚Äì ◊î◊õ◊ú ◊ê◊ô◊†◊ò◊®◊ê◊ß◊ò◊ô◊ë◊ô
  read -rp "Enter path to SealedSecret manifest: " SEALED_FILE
  echo "Select cluster:"
  select choice in "${CLUSTERS[@]}"; do
    CLUSTER="$choice"
    [ -n "$CLUSTER" ] && break
  done
elif [ $# -eq 1 ]; then
  # ◊§◊®◊û◊ò◊® ◊ê◊ó◊ì ‚Äì ◊ñ◊î ◊î◊†◊™◊ô◊ë ◊ú-SealedSecret
  SEALED_FILE="$1"
  echo "Select cluster:"
  select choice in "${CLUSTERS[@]}"; do
    CLUSTER="$choice"
    [ -n "$CLUSTER" ] && break
  done
else
  # ◊©◊†◊ô ◊§◊®◊û◊ò◊®◊ô◊ù ‚Äì cluster + manifest
  CLUSTER="$1"
  SEALED_FILE="$2"
fi

# === ◊û◊ô◊§◊ï◊ô ◊ß◊ú◊ê◊°◊ò◊®◊ô◊ù ===
case "$CLUSTER" in
  bm)
    CONTROLLER_URL="bm_url"
    NAMESPACE_KEY="namespace-bm-dv"
    VALUES_FILE="values-bm-dev.yaml"
    MODE="json"
    ;;
  rawdemo)
    CONTROLLER_NAME="sealed-secrets-controller"
    CONTROLLER_NAMESPACE="kube-system"
    NAMESPACE_KEY="namespace-rawdemo"
    VALUES_FILE="values-rawdemo.yaml"
    MODE="raw"
    ;;
  *)
    echo "Unknown cluster: $CLUSTER"
    exit 1
    ;;
esac

echo "‚ÑπÔ∏è  Selected cluster: $CLUSTER"
echo "‚ÑπÔ∏è  Values file: $VALUES_FILE"
echo "‚ÑπÔ∏è  Namespace key in config.json: $NAMESPACE_KEY"
echo "‚ÑπÔ∏è  SealedSecret manifest: $SEALED_FILE"
echo "‚ÑπÔ∏è  Mode: $MODE"

# === ◊©◊ú◊ô◊§◊™ namespace ◊û◊™◊ï◊ö config.json ===
NAMESPACE=$(jq -r ".\"$NAMESPACE_KEY\"" config.json)
echo "‚ÑπÔ∏è  Namespace resolved: $NAMESPACE"

# === ◊©◊ú◊ô◊§◊™ ◊©◊ù ◊î÷æSecret ◊û◊™◊ï◊ö ◊î◊û◊†◊ô◊§◊°◊ò ===
SECRET_NAME=$(yq e '.metadata.name' "$SEALED_FILE")
echo "‚ÑπÔ∏è  Secret name: $SECRET_NAME"

# === ◊ú◊ï◊ú◊ê◊î ◊¢◊ú ◊ß◊ï◊ë◊• .secrets ===
while IFS=":" read -r KEY VALUE; do
  KEY=$(echo "$KEY" | xargs)
  VALUE=$(echo "$VALUE" | xargs)
  [ -z "$KEY" ] && continue

  echo "üîë Processing key: $KEY"

  if [ "$MODE" = "json" ]; then
    ENCVAL=$(
      echo -n "$VALUE" | kubectl create secret generic "$SECRET_NAME" \
        --namespace "$NAMESPACE" \
        --from-literal="$KEY=/dev/stdin" \
        --dry-run=client -o json \
      | kubeseal --controller-url="$CONTROLLER_URL" --format=yaml \
      | yq e ".spec.encryptedData.$KEY" -
    )
  elif [ "$MODE" = "raw" ]; then
    ENCVAL=$(
      echo -n "$VALUE" | kubeseal \
        --raw \
        --name "$SECRET_NAME" \
        --namespace "$NAMESPACE" \
        --controller-name "$CONTROLLER_NAME" \
        --controller-namespace "$CONTROLLER_NAMESPACE"
    )
  else
    echo "Unsupported MODE=$MODE"
    exit 1
  fi

  # ◊û◊¶◊ô◊ê◊™ ◊î◊î◊§◊†◊ô◊î ◊ú÷æValues ◊ë◊™◊ï◊ö ◊î-template
  PATH_IN_VALUES=$(grep -o "{{ .Values\.[^ }]* }}" "$SEALED_FILE" | grep "$KEY" | sed -E 's/\{\{ .Values\.([^ }]+) \}\}/\1/')

  echo "üîç Key=$KEY PATH_IN_VALUES=$PATH_IN_VALUES"
  # echo "üîç Encrypted value (truncated): ${ENCVAL:0:20}..."

  if [ -n "$PATH_IN_VALUES" ]; then
    echo "üìù Updating $VALUES_FILE -> $PATH_IN_VALUES"
    yq e -i ".${PATH_IN_VALUES} = \"$ENCVAL\"" "$VALUES_FILE"
  else
    echo "‚ö†Ô∏è  Key $KEY not found in SealedSecret template"
  fi

done < .secrets

echo "‚úÖ Done. Updated $VALUES_FILE"
